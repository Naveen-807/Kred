/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface EntropyEventsV2Interface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "ProviderDefaultGasLimitUpdated"
      | "ProviderFeeManagerUpdated"
      | "ProviderFeeUpdated"
      | "ProviderMaxNumHashesAdvanced"
      | "ProviderUriUpdated"
      | "Registered"
      | "Requested"
      | "Revealed"
      | "Withdrawal"
  ): EventFragment;
}

export namespace ProviderDefaultGasLimitUpdatedEvent {
  export type InputTuple = [
    provider: AddressLike,
    oldDefaultGasLimit: BigNumberish,
    newDefaultGasLimit: BigNumberish,
    extraArgs: BytesLike
  ];
  export type OutputTuple = [
    provider: string,
    oldDefaultGasLimit: bigint,
    newDefaultGasLimit: bigint,
    extraArgs: string
  ];
  export interface OutputObject {
    provider: string;
    oldDefaultGasLimit: bigint;
    newDefaultGasLimit: bigint;
    extraArgs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderFeeManagerUpdatedEvent {
  export type InputTuple = [
    provider: AddressLike,
    oldFeeManager: AddressLike,
    newFeeManager: AddressLike,
    extraArgs: BytesLike
  ];
  export type OutputTuple = [
    provider: string,
    oldFeeManager: string,
    newFeeManager: string,
    extraArgs: string
  ];
  export interface OutputObject {
    provider: string;
    oldFeeManager: string;
    newFeeManager: string;
    extraArgs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderFeeUpdatedEvent {
  export type InputTuple = [
    provider: AddressLike,
    oldFee: BigNumberish,
    newFee: BigNumberish,
    extraArgs: BytesLike
  ];
  export type OutputTuple = [
    provider: string,
    oldFee: bigint,
    newFee: bigint,
    extraArgs: string
  ];
  export interface OutputObject {
    provider: string;
    oldFee: bigint;
    newFee: bigint;
    extraArgs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderMaxNumHashesAdvancedEvent {
  export type InputTuple = [
    provider: AddressLike,
    oldMaxNumHashes: BigNumberish,
    newMaxNumHashes: BigNumberish,
    extraArgs: BytesLike
  ];
  export type OutputTuple = [
    provider: string,
    oldMaxNumHashes: bigint,
    newMaxNumHashes: bigint,
    extraArgs: string
  ];
  export interface OutputObject {
    provider: string;
    oldMaxNumHashes: bigint;
    newMaxNumHashes: bigint;
    extraArgs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderUriUpdatedEvent {
  export type InputTuple = [
    provider: AddressLike,
    oldUri: BytesLike,
    newUri: BytesLike,
    extraArgs: BytesLike
  ];
  export type OutputTuple = [
    provider: string,
    oldUri: string,
    newUri: string,
    extraArgs: string
  ];
  export interface OutputObject {
    provider: string;
    oldUri: string;
    newUri: string;
    extraArgs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredEvent {
  export type InputTuple = [provider: AddressLike, extraArgs: BytesLike];
  export type OutputTuple = [provider: string, extraArgs: string];
  export interface OutputObject {
    provider: string;
    extraArgs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedEvent {
  export type InputTuple = [
    provider: AddressLike,
    caller: AddressLike,
    sequenceNumber: BigNumberish,
    userContribution: BytesLike,
    gasLimit: BigNumberish,
    extraArgs: BytesLike
  ];
  export type OutputTuple = [
    provider: string,
    caller: string,
    sequenceNumber: bigint,
    userContribution: string,
    gasLimit: bigint,
    extraArgs: string
  ];
  export interface OutputObject {
    provider: string;
    caller: string;
    sequenceNumber: bigint;
    userContribution: string;
    gasLimit: bigint;
    extraArgs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevealedEvent {
  export type InputTuple = [
    provider: AddressLike,
    caller: AddressLike,
    sequenceNumber: BigNumberish,
    randomNumber: BytesLike,
    userContribution: BytesLike,
    providerContribution: BytesLike,
    callbackFailed: boolean,
    callbackReturnValue: BytesLike,
    callbackGasUsed: BigNumberish,
    extraArgs: BytesLike
  ];
  export type OutputTuple = [
    provider: string,
    caller: string,
    sequenceNumber: bigint,
    randomNumber: string,
    userContribution: string,
    providerContribution: string,
    callbackFailed: boolean,
    callbackReturnValue: string,
    callbackGasUsed: bigint,
    extraArgs: string
  ];
  export interface OutputObject {
    provider: string;
    caller: string;
    sequenceNumber: bigint;
    randomNumber: string;
    userContribution: string;
    providerContribution: string;
    callbackFailed: boolean;
    callbackReturnValue: string;
    callbackGasUsed: bigint;
    extraArgs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    provider: AddressLike,
    recipient: AddressLike,
    withdrawnAmount: BigNumberish,
    extraArgs: BytesLike
  ];
  export type OutputTuple = [
    provider: string,
    recipient: string,
    withdrawnAmount: bigint,
    extraArgs: string
  ];
  export interface OutputObject {
    provider: string;
    recipient: string;
    withdrawnAmount: bigint;
    extraArgs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EntropyEventsV2 extends BaseContract {
  connect(runner?: ContractRunner | null): EntropyEventsV2;
  waitForDeployment(): Promise<this>;

  interface: EntropyEventsV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "ProviderDefaultGasLimitUpdated"
  ): TypedContractEvent<
    ProviderDefaultGasLimitUpdatedEvent.InputTuple,
    ProviderDefaultGasLimitUpdatedEvent.OutputTuple,
    ProviderDefaultGasLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderFeeManagerUpdated"
  ): TypedContractEvent<
    ProviderFeeManagerUpdatedEvent.InputTuple,
    ProviderFeeManagerUpdatedEvent.OutputTuple,
    ProviderFeeManagerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderFeeUpdated"
  ): TypedContractEvent<
    ProviderFeeUpdatedEvent.InputTuple,
    ProviderFeeUpdatedEvent.OutputTuple,
    ProviderFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderMaxNumHashesAdvanced"
  ): TypedContractEvent<
    ProviderMaxNumHashesAdvancedEvent.InputTuple,
    ProviderMaxNumHashesAdvancedEvent.OutputTuple,
    ProviderMaxNumHashesAdvancedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderUriUpdated"
  ): TypedContractEvent<
    ProviderUriUpdatedEvent.InputTuple,
    ProviderUriUpdatedEvent.OutputTuple,
    ProviderUriUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Registered"
  ): TypedContractEvent<
    RegisteredEvent.InputTuple,
    RegisteredEvent.OutputTuple,
    RegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Requested"
  ): TypedContractEvent<
    RequestedEvent.InputTuple,
    RequestedEvent.OutputTuple,
    RequestedEvent.OutputObject
  >;
  getEvent(
    key: "Revealed"
  ): TypedContractEvent<
    RevealedEvent.InputTuple,
    RevealedEvent.OutputTuple,
    RevealedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "ProviderDefaultGasLimitUpdated(address,uint32,uint32,bytes)": TypedContractEvent<
      ProviderDefaultGasLimitUpdatedEvent.InputTuple,
      ProviderDefaultGasLimitUpdatedEvent.OutputTuple,
      ProviderDefaultGasLimitUpdatedEvent.OutputObject
    >;
    ProviderDefaultGasLimitUpdated: TypedContractEvent<
      ProviderDefaultGasLimitUpdatedEvent.InputTuple,
      ProviderDefaultGasLimitUpdatedEvent.OutputTuple,
      ProviderDefaultGasLimitUpdatedEvent.OutputObject
    >;

    "ProviderFeeManagerUpdated(address,address,address,bytes)": TypedContractEvent<
      ProviderFeeManagerUpdatedEvent.InputTuple,
      ProviderFeeManagerUpdatedEvent.OutputTuple,
      ProviderFeeManagerUpdatedEvent.OutputObject
    >;
    ProviderFeeManagerUpdated: TypedContractEvent<
      ProviderFeeManagerUpdatedEvent.InputTuple,
      ProviderFeeManagerUpdatedEvent.OutputTuple,
      ProviderFeeManagerUpdatedEvent.OutputObject
    >;

    "ProviderFeeUpdated(address,uint128,uint128,bytes)": TypedContractEvent<
      ProviderFeeUpdatedEvent.InputTuple,
      ProviderFeeUpdatedEvent.OutputTuple,
      ProviderFeeUpdatedEvent.OutputObject
    >;
    ProviderFeeUpdated: TypedContractEvent<
      ProviderFeeUpdatedEvent.InputTuple,
      ProviderFeeUpdatedEvent.OutputTuple,
      ProviderFeeUpdatedEvent.OutputObject
    >;

    "ProviderMaxNumHashesAdvanced(address,uint32,uint32,bytes)": TypedContractEvent<
      ProviderMaxNumHashesAdvancedEvent.InputTuple,
      ProviderMaxNumHashesAdvancedEvent.OutputTuple,
      ProviderMaxNumHashesAdvancedEvent.OutputObject
    >;
    ProviderMaxNumHashesAdvanced: TypedContractEvent<
      ProviderMaxNumHashesAdvancedEvent.InputTuple,
      ProviderMaxNumHashesAdvancedEvent.OutputTuple,
      ProviderMaxNumHashesAdvancedEvent.OutputObject
    >;

    "ProviderUriUpdated(address,bytes,bytes,bytes)": TypedContractEvent<
      ProviderUriUpdatedEvent.InputTuple,
      ProviderUriUpdatedEvent.OutputTuple,
      ProviderUriUpdatedEvent.OutputObject
    >;
    ProviderUriUpdated: TypedContractEvent<
      ProviderUriUpdatedEvent.InputTuple,
      ProviderUriUpdatedEvent.OutputTuple,
      ProviderUriUpdatedEvent.OutputObject
    >;

    "Registered(address,bytes)": TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
    Registered: TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;

    "Requested(address,address,uint64,bytes32,uint32,bytes)": TypedContractEvent<
      RequestedEvent.InputTuple,
      RequestedEvent.OutputTuple,
      RequestedEvent.OutputObject
    >;
    Requested: TypedContractEvent<
      RequestedEvent.InputTuple,
      RequestedEvent.OutputTuple,
      RequestedEvent.OutputObject
    >;

    "Revealed(address,address,uint64,bytes32,bytes32,bytes32,bool,bytes,uint32,bytes)": TypedContractEvent<
      RevealedEvent.InputTuple,
      RevealedEvent.OutputTuple,
      RevealedEvent.OutputObject
    >;
    Revealed: TypedContractEvent<
      RevealedEvent.InputTuple,
      RevealedEvent.OutputTuple,
      RevealedEvent.OutputObject
    >;

    "Withdrawal(address,address,uint128,bytes)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
