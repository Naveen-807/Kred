/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PythEntropyOTP {
  export type OTPRequestStruct = {
    requester: AddressLike;
    phoneNumber: string;
    sequenceNumber: BigNumberish;
    timestamp: BigNumberish;
    fulfilled: boolean;
    otp: BigNumberish;
  };

  export type OTPRequestStructOutput = [
    requester: string,
    phoneNumber: string,
    sequenceNumber: bigint,
    timestamp: bigint,
    fulfilled: boolean,
    otp: bigint
  ] & {
    requester: string;
    phoneNumber: string;
    sequenceNumber: bigint;
    timestamp: bigint;
    fulfilled: boolean;
    otp: bigint;
  };
}

export interface PythEntropyOTPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_OTP_ATTEMPTS"
      | "OTP_DIGITS"
      | "OTP_EXPIRY_SECONDS"
      | "_entropyCallback"
      | "entropy"
      | "entropyProvider"
      | "getOTP"
      | "getOTPRequest"
      | "getRemainingAttempts"
      | "latestOTP"
      | "otpAttempts"
      | "otpExpiry"
      | "otpRequests"
      | "owner"
      | "requestOTP"
      | "transferOwnership"
      | "updateEntropyProvider"
      | "verifyOTP"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OTPExpired"
      | "OTPGenerated"
      | "OTPRequested"
      | "OTPVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_OTP_ATTEMPTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OTP_DIGITS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OTP_EXPIRY_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_entropyCallback",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "entropy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "entropyProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOTP", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getOTPRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingAttempts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "latestOTP", values: [string]): string;
  encodeFunctionData(functionFragment: "otpAttempts", values: [string]): string;
  encodeFunctionData(functionFragment: "otpExpiry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "otpRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestOTP",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEntropyProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOTP",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_OTP_ATTEMPTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OTP_DIGITS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OTP_EXPIRY_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_entropyCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entropy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entropyProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOTP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOTPRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingAttempts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "latestOTP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "otpAttempts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "otpExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "otpRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requestOTP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEntropyProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyOTP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace OTPExpiredEvent {
  export type InputTuple = [phoneNumber: string, timestamp: BigNumberish];
  export type OutputTuple = [phoneNumber: string, timestamp: bigint];
  export interface OutputObject {
    phoneNumber: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OTPGeneratedEvent {
  export type InputTuple = [
    sequenceNumber: BigNumberish,
    phoneNumber: string,
    otp: BigNumberish,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    sequenceNumber: bigint,
    phoneNumber: string,
    otp: bigint,
    expiresAt: bigint
  ];
  export interface OutputObject {
    sequenceNumber: bigint;
    phoneNumber: string;
    otp: bigint;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OTPRequestedEvent {
  export type InputTuple = [
    sequenceNumber: BigNumberish,
    phoneNumber: string,
    requester: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    sequenceNumber: bigint,
    phoneNumber: string,
    requester: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    sequenceNumber: bigint;
    phoneNumber: string;
    requester: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OTPVerifiedEvent {
  export type InputTuple = [
    phoneNumber: string,
    success: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    phoneNumber: string,
    success: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    phoneNumber: string;
    success: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PythEntropyOTP extends BaseContract {
  connect(runner?: ContractRunner | null): PythEntropyOTP;
  waitForDeployment(): Promise<this>;

  interface: PythEntropyOTPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_OTP_ATTEMPTS: TypedContractMethod<[], [bigint], "view">;

  OTP_DIGITS: TypedContractMethod<[], [bigint], "view">;

  OTP_EXPIRY_SECONDS: TypedContractMethod<[], [bigint], "view">;

  _entropyCallback: TypedContractMethod<
    [sequence: BigNumberish, provider: AddressLike, randomNumber: BytesLike],
    [void],
    "nonpayable"
  >;

  entropy: TypedContractMethod<[], [string], "view">;

  entropyProvider: TypedContractMethod<[], [string], "view">;

  getOTP: TypedContractMethod<
    [phoneNumber: string],
    [
      [bigint, boolean, bigint] & {
        otp: bigint;
        isValid: boolean;
        expiresAt: bigint;
      }
    ],
    "view"
  >;

  getOTPRequest: TypedContractMethod<
    [sequenceNumber: BigNumberish],
    [PythEntropyOTP.OTPRequestStructOutput],
    "view"
  >;

  getRemainingAttempts: TypedContractMethod<
    [phoneNumber: string],
    [bigint],
    "view"
  >;

  latestOTP: TypedContractMethod<[arg0: string], [bigint], "view">;

  otpAttempts: TypedContractMethod<[arg0: string], [bigint], "view">;

  otpExpiry: TypedContractMethod<[arg0: string], [bigint], "view">;

  otpRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, bigint] & {
        requester: string;
        phoneNumber: string;
        sequenceNumber: bigint;
        timestamp: bigint;
        fulfilled: boolean;
        otp: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  requestOTP: TypedContractMethod<
    [phoneNumber: string, userRandomNumber: BytesLike],
    [bigint],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateEntropyProvider: TypedContractMethod<
    [newProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyOTP: TypedContractMethod<
    [phoneNumber: string, otp: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_OTP_ATTEMPTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OTP_DIGITS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OTP_EXPIRY_SECONDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_entropyCallback"
  ): TypedContractMethod<
    [sequence: BigNumberish, provider: AddressLike, randomNumber: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "entropy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "entropyProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOTP"
  ): TypedContractMethod<
    [phoneNumber: string],
    [
      [bigint, boolean, bigint] & {
        otp: bigint;
        isValid: boolean;
        expiresAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOTPRequest"
  ): TypedContractMethod<
    [sequenceNumber: BigNumberish],
    [PythEntropyOTP.OTPRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRemainingAttempts"
  ): TypedContractMethod<[phoneNumber: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestOTP"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "otpAttempts"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "otpExpiry"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "otpRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, bigint] & {
        requester: string;
        phoneNumber: string;
        sequenceNumber: bigint;
        timestamp: bigint;
        fulfilled: boolean;
        otp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requestOTP"
  ): TypedContractMethod<
    [phoneNumber: string, userRandomNumber: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEntropyProvider"
  ): TypedContractMethod<[newProvider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyOTP"
  ): TypedContractMethod<
    [phoneNumber: string, otp: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "OTPExpired"
  ): TypedContractEvent<
    OTPExpiredEvent.InputTuple,
    OTPExpiredEvent.OutputTuple,
    OTPExpiredEvent.OutputObject
  >;
  getEvent(
    key: "OTPGenerated"
  ): TypedContractEvent<
    OTPGeneratedEvent.InputTuple,
    OTPGeneratedEvent.OutputTuple,
    OTPGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "OTPRequested"
  ): TypedContractEvent<
    OTPRequestedEvent.InputTuple,
    OTPRequestedEvent.OutputTuple,
    OTPRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OTPVerified"
  ): TypedContractEvent<
    OTPVerifiedEvent.InputTuple,
    OTPVerifiedEvent.OutputTuple,
    OTPVerifiedEvent.OutputObject
  >;

  filters: {
    "OTPExpired(string,uint256)": TypedContractEvent<
      OTPExpiredEvent.InputTuple,
      OTPExpiredEvent.OutputTuple,
      OTPExpiredEvent.OutputObject
    >;
    OTPExpired: TypedContractEvent<
      OTPExpiredEvent.InputTuple,
      OTPExpiredEvent.OutputTuple,
      OTPExpiredEvent.OutputObject
    >;

    "OTPGenerated(uint64,string,uint256,uint256)": TypedContractEvent<
      OTPGeneratedEvent.InputTuple,
      OTPGeneratedEvent.OutputTuple,
      OTPGeneratedEvent.OutputObject
    >;
    OTPGenerated: TypedContractEvent<
      OTPGeneratedEvent.InputTuple,
      OTPGeneratedEvent.OutputTuple,
      OTPGeneratedEvent.OutputObject
    >;

    "OTPRequested(uint64,string,address,uint256)": TypedContractEvent<
      OTPRequestedEvent.InputTuple,
      OTPRequestedEvent.OutputTuple,
      OTPRequestedEvent.OutputObject
    >;
    OTPRequested: TypedContractEvent<
      OTPRequestedEvent.InputTuple,
      OTPRequestedEvent.OutputTuple,
      OTPRequestedEvent.OutputObject
    >;

    "OTPVerified(string,bool,uint256)": TypedContractEvent<
      OTPVerifiedEvent.InputTuple,
      OTPVerifiedEvent.OutputTuple,
      OTPVerifiedEvent.OutputObject
    >;
    OTPVerified: TypedContractEvent<
      OTPVerifiedEvent.InputTuple,
      OTPVerifiedEvent.OutputTuple,
      OTPVerifiedEvent.OutputObject
    >;
  };
}
